name: Release

on: [pull_request]

defaults:
  run:
    shell: bash

env:
  JDK_VERSION: 14
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOWNLOAD_DIR: "~/robozonky/downloads"

jobs:
  build_project:
    name: Build the project
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Install Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_VERSION }}
      - name: Determine RoboZonky version
        run: |
          ROBOZONKY_VERSION=$(mvn -q \
            -Dexec.executable="echo" \
            -Dexec.args='${project.version}' \
            --non-recursive \
            org.codehaus.mojo:exec-maven-plugin:1.6.0:exec \
          )
          echo "::set-env name=ROBOZONKY_VERSION::$ROBOZONKY_VERSION"
      - name: Check RoboZonky version
        run: echo "The detected RoboZonky version is $ROBOZONKY_VERSION"
      - name: Run the build
        run: mvn clean install --batch-mode -DskipTests
      - name: Run JLink for the CLI JAR
        run: |
          zip -r robozonky-build.zip .
      - name: Share the build directory
        uses: actions/upload-artifact@v1
        with:
          name: robozonky-build.zip
  jlink1:
    name: JLink the Main app and CLI binaries
    needs: build_project
    strategy:
      fail-fast: false # Always see all results on all platforms.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download the build directory
        uses: actions/download-artifact@v1
        with:
          name: robozonky-build.zip
          path: ${{ env.DOWNLOAD_DIR }}/robozonky-build.zip
      - name: Unzip the build directory
        run:
          unzip ${{ env.DOWNLOAD_DIR }}/robozonky-build.zip .
      - name: Install Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_VERSION }}
      - name: Determine RoboZonky version
        run: |
          ROBOZONKY_VERSION=$(mvn -q \
            -Dexec.executable="echo" \
            -Dexec.args='${project.version}' \
            --non-recursive \
            org.codehaus.mojo:exec-maven-plugin:1.6.0:exec \
          )
          echo "::set-env name=ROBOZONKY_VERSION::$ROBOZONKY_VERSION"
      - name: Check RoboZonky version
        run: echo "The detected RoboZonky version is $ROBOZONKY_VERSION"
      - name: Run JLink for the Main JAR
        run: |
          .github/workflows/jlink.sh robozonky-app/target/robozonky-app-$ROBOZONKY_VERSION-full.jar ${{ env.DOWNLOAD_DIR }}/app-jre
          zip -r ${{ env.DOWNLOAD_DIR }}/robozonky-app-jre.zip ${{ env.DOWNLOAD_DIR }}/app-jre
      - name: Run JLink for the CLI JAR
        run: |
          .github/workflows/jlink.sh robozonky-cli/target/robozonky-cli-$ROBOZONKY_VERSION-full.jar ${{ env.DOWNLOAD_DIR }}/cli-jre
          zip -r ${{ env.DOWNLOAD_DIR }}/robozonky-cli-jre.zip ${{ env.DOWNLOAD_DIR }}/cli-jre
      - name: Determine OS shorthand # Avoid proliferation of Ubuntu and remove the -latest suffix
        run:
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "::set-env name=ROBOZONKY_OS::windows"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "::set-env name=ROBOZONKY_OS::macos"
          else
          echo "::set-env name=ROBOZONKY_OS::linux"
          fi
      - name: Upload JLinked JRE for Main JAR
        uses: actions/upload-artifact@v1
        with:
          name: robozonky-app-jre-$ROBOZONKY_OS.zip
          path: ${{ env.DOWNLOAD_DIR }}/robozonky-app-jre.zip
      - name: Upload JLinked JRE for CLI JAR
        uses: actions/upload-artifact@v1
        with:
          name: robozonky-cli-jre-$ROBOZONKY_OS.zip
          path: ${{ env.DOWNLOAD_DIR }}/robozonky-cli-jre.zip
  distributions1:
    name: Prepare distribution archives for Main daemon and CLI
    needs: jlink1
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Install Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_VERSION }}
      - name: Download Linux JREs for Main JAR
        uses: actions/download-artifact@v1
        with:
          name: robozonky-app-jre-ubuntu-latest.zip
          path: robozonky-distributions/robozonky-distributions-full/target/robozonky-app-jre-linux.zip
      - name: Download MacOS JREs for Main JAR
        uses: actions/download-artifact@v1
        with:
          name: robozonky-app-jre-macos-latest.zip
          path: robozonky-distributions/robozonky-distributions-full/target/robozonky-app-jre-macos.zip
      - name: Download Windows JREs for Main JAR
        uses: actions/download-artifact@v1
        with:
          name: robozonky-app-jre-windows-latest.zip
          path: robozonky-distributions/robozonky-distributions-full/target/robozonky-app-jre-windows.zip
      - name: Download Linux JREs for CLI JAR
        uses: actions/download-artifact@v1
        with:
          name: robozonky-cli-jre-linux.zip
          path: robozonky-distributions/robozonky-distributions-full/target/robozonky-app-jre-linux.zip
      - name: Download MacOS JREs for CLI JAR
        uses: actions/download-artifact@v1
        with:
          name: robozonky-cli-jre-macos.zip
          path: robozonky-distributions/robozonky-distributions-full/target/robozonky-app-jre-macos.zip
      - name: Download Windows JREs for CLI JAR
        uses: actions/download-artifact@v1
        with:
          name: robozonky-cli-jre-windows.zip
          path: robozonky-distributions/robozonky-distributions-full/target/robozonky-app-jre-windows.zip

#jobs:
#  release:
#    name: Release
#    strategy:
#      fail-fast: false # Always see all results on all platforms.
#      matrix:
#        os: [ubuntu-latest, windows-latest, macos-latest]
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Deploy Maven package
#        uses: samuelmeuli/action-maven-publish@v1
#        with:
#          maven_args: "-DskipTests"
#          maven_profiles: release
#          maven_goals_phases: deploy
#          gpg_private_key: ${{ secrets.MAVEN_CENTRAL_PRIVATE_KEY }}
#          gpg_passphrase: ${{ secrets.MAVEN_CENTRAL_PRIVATE_KEY_PASSWORD }}
#          server_id: ossrh
#          nexus_username: ${{ secrets.MAVEN_CENTRAL_ACCOUNT_NAME }}
#          nexus_password: ${{ secrets.MAVEN_CENTRAL_ACCOUNT_PASSWORD }}
