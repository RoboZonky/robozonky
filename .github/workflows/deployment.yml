# Brings in AdoptOpenJDK (same as in Docker image) to build and deploy the release.
name: Deployment

on:
  push:
    branches:
      - master
      - '[0-9]+.[0-9]+.x'
    tags:
      - robozonky-[0-9]+.[0-9]+.[0-9]+*
  # Uncomment below to debug this workflow in CI.
  pull_request:
    branches:
      - master

env:
  RUNTIME_JDK_VERSION: 16.0.1
  JLINK_SCRIPT_FILENAME: .github/workflows/jlink.sh
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Ensure that the tests pass
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Set up AdoptOpenJDK with sdkman
        uses: sdkman/sdkman-action@master
        with:
          candidate: java
          version: ${{ env.RUNTIME_JDK_VERSION }}.hs-adpt
      - name: Install Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.RUNTIME_JDK_VERSION }}
          jdkFile: ${{ steps.sdkman.outputs.file }}
      # See https://docs.github.com/en/actions/guides/building-and-testing-java-with-maven#caching-dependencies
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and test
        run: mvn install --batch-mode -Dpit.skip=true
  jlink:
    name: JREs for natively supported platforms
    needs: test
    strategy:
      fail-fast: false # Always see all results on all platforms.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Set up AdoptOpenJDK with sdkman
        uses: sdkman/sdkman-action@master
        with:
          candidate: java
          version: ${{ env.RUNTIME_JDK_VERSION }}.hs-adpt
      - name: Install Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.RUNTIME_JDK_VERSION }}
          jdkFile: ${{ steps.sdkman.outputs.file }}
      # See https://docs.github.com/en/actions/guides/building-and-testing-java-with-maven#caching-dependencies
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run the build
        run: mvn install --batch-mode -DskipTests
      - name: Determine RoboZonky version
        run: |
          ROBOZONKY_VERSION=$(mvn -q \
            -Dexec.executable="echo" \
            -Dexec.args='${project.version}' \
            --non-recursive \
            org.codehaus.mojo:exec-maven-plugin:1.6.0:exec \
          )
          echo "The detected RoboZonky version is $ROBOZONKY_VERSION"
          echo "ROBOZONKY_VERSION=$ROBOZONKY_VERSION" >> $GITHUB_ENV
      # Avoid proliferation of Ubuntu and remove the -latest suffix.
      - name: This is Mac OS X
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "ROBOZONKY_OS=macos" >> $GITHUB_ENV
      - name: This is Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          echo "ROBOZONKY_OS=windows" >> $GITHUB_ENV
      - name: This is Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "ROBOZONKY_OS=linux" >> $GITHUB_ENV
      # Build and publish the JLinked JRE.
      - name: Run JLink for the JARs
        run: |
          chmod +x ${{ env.JLINK_SCRIPT_FILENAME }}
          ./${{ env.JLINK_SCRIPT_FILENAME }} robozonky-app/target/robozonky-app-${{ env.ROBOZONKY_VERSION }}-full.jar robozonky-jre
          ./${{ env.JLINK_SCRIPT_FILENAME }} robozonky-installer/target/robozonky-installer-${{ env.ROBOZONKY_VERSION }}-full.jar robozonky-installer-jre
      - name: Upload JLinked app JRE
        uses: actions/upload-artifact@v2
        with:
          name: robozonky-jre-${{ env.ROBOZONKY_OS }}
          path: robozonky-jre/**/*
      - name: Upload JLinked installer JRE
        uses: actions/upload-artifact@v2
        with:
          name: robozonky-installer-jre-${{ env.ROBOZONKY_OS }}
          path: robozonky-installer-jre/**/*
  jlink-arm:
    name: JREs for ARM
    needs: test
    strategy:
      fail-fast: false # Always see all results on all platforms.
      matrix:
        arch: [ aarch64 ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      # Build and publish the JLinked JRE.
      - uses: uraimo/run-on-arch-action@v2.0.10
        name: Build the JARs and run JLink
        with:
          arch: ${{ matrix.arch }}
          distro: bullseye
          dockerRunArgs: |
            --volume "${PWD}:/parent"
          shell: /bin/bash
          install: |
            apt-get update
            apt-get -qq -y install bash curl wget unzip zip
          run:
            bash -c "curl -s https://get.sdkman.io | bash
              source /root/.sdkman/bin/sdkman-init.sh
              sdk install java 16.0.1.hs-adpt
              sdk install maven
              cd profile
              mvn install --batch-mode -DskipTests
              ROBOZONKY_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.6.0:exec)
              chmod +x ${{ env.JLINK_SCRIPT_FILENAME }}
              ${{ env.JLINK_SCRIPT_FILENAME }} robozonky-app/target/robozonky-app-$ROBOZONKY_VERSION-full.jar robozonky-jre
              ${{ env.JLINK_SCRIPT_FILENAME }} robozonky-installer/target/robozonky-installer-$ROBOZONKY_VERSION-full.jar robozonky-installer-jre"
      - name: Upload JLinked app JRE
        uses: actions/upload-artifact@v2
        with:
          name: robozonky-jre-linux-arm64v8
          path: robozonky-jre/**/*
      - name: Upload JLinked installer JRE
        uses: actions/upload-artifact@v2
        with:
          name: robozonky-installer-jre-linux-arm64v8
          path: robozonky-installer-jre/**/*
  build:
    name: Build and deploy
    needs:
      - jlink
      - jlink-arm
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Set up AdoptOpenJDK with sdkman
        uses: sdkman/sdkman-action@master
        with:
          candidate: java
          version: ${{ env.RUNTIME_JDK_VERSION }}.hs-adpt
      - name: Install Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.RUNTIME_JDK_VERSION }}
          jdkFile: ${{ steps.sdkman.outputs.file }}
      # See https://docs.github.com/en/actions/guides/building-and-testing-java-with-maven#caching-dependencies
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Download Linux (x64) main app JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-jre-linux
          path: robozonky-distribution/robozonky-distribution-full/target/jre-linux
      - name: Download Linux (arm64v8) main app JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-jre-linux-arm64v8
          path: robozonky-distribution/robozonky-distribution-full/target/jre-linux-arm64v8
      - name: Download MacOS main app JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-jre-macos
          path: robozonky-distribution/robozonky-distribution-full/target/jre-macos
      - name: Download Windows main app JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-jre-windows
          path: robozonky-distribution/robozonky-distribution-full/target/jre-windows
      - name: Download Linux (x64) installer JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-installer-jre-linux
          path: robozonky-distribution/robozonky-distribution-installer/target/jre-linux
      - name: Download Linux (arm64v8) installer JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-installer-jre-linux-arm64v8
          path: robozonky-distribution/robozonky-distribution-installer/target/jre-linux-arm64v8
      - name: Download MacOS installer JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-installer-jre-macos
          path: robozonky-distribution/robozonky-distribution-installer/target/jre-macos
      - name: Download Windows installer JRE
        uses: actions/download-artifact@v2
        with:
          name: robozonky-installer-jre-windows
          path: robozonky-distribution/robozonky-distribution-installer/target/jre-windows
      - name: Build, sign and deploy
        uses: samuelmeuli/action-maven-publish@v1
        with:
          maven_goals_phases: deploy # Don't call "clean", or else all the downloaded JREs would disappear.
          # Enable release profile; attempt to resolve intermittent connection issues.
          # See https://stackoverflow.com/questions/55899091/maven-retry-dependency-download-if-failed.
          maven_args: "-Drobozonky.release.profile=true -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false"
          gpg_private_key: ${{ secrets.MAVEN_CENTRAL_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.MAVEN_CENTRAL_PRIVATE_KEY_PASSWORD }}
          server_id: ossrh
          nexus_username: ${{ secrets.MAVEN_CENTRAL_ACCOUNT_NAME }}
          nexus_password: ${{ secrets.MAVEN_CENTRAL_ACCOUNT_PASSWORD }}
      - name: Determine RoboZonky version
        run: |
          ROBOZONKY_VERSION=$(mvn -q \
            -Dexec.executable="echo" \
            -Dexec.args='${project.version}' \
            --non-recursive \
            org.codehaus.mojo:exec-maven-plugin:1.6.0:exec \
          )
          echo "The detected RoboZonky version is $ROBOZONKY_VERSION"
          echo "ROBOZONKY_VERSION=$ROBOZONKY_VERSION" >> $GITHUB_ENV
      # If this is not a SNAPSHOT, create a Github Release and upload all the artifacts there.
      - name: Create Github Release
        id: create_release
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Upload Main app (Windows, x64)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-full/target/robozonky-distribution-full-${{ env.ROBOZONKY_VERSION }}-windows-x64.zip
          asset_name: robozonky-${{ env.ROBOZONKY_VERSION }}-windows-x64.zip
          asset_content_type: application/zip
      - name: Upload Main app (MacOS, x64)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-full/target/robozonky-distribution-full-${{ env.ROBOZONKY_VERSION }}-macos-x64.tar.gz
          asset_name: robozonky-${{ env.ROBOZONKY_VERSION }}-macos-x64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Main app (Linux, x64)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-full/target/robozonky-distribution-full-${{ env.ROBOZONKY_VERSION }}-linux-x64.tar.xz
          asset_name: robozonky-${{ env.ROBOZONKY_VERSION }}-linux-x64.tar.xz
          asset_content_type: application/x-xz
      - name: Upload Main app (Linux, arm64v8)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-full/target/robozonky-distribution-full-${{ env.ROBOZONKY_VERSION }}-linux-arm64v8.tar.xz
          asset_name: robozonky-${{ env.ROBOZONKY_VERSION }}-linux-arm64v8.tar.xz
          asset_content_type: application/x-xz
      - name: Upload Main app (noarch)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-full/target/robozonky-distribution-full-${{ env.ROBOZONKY_VERSION }}-noarch.zip
          asset_name: robozonky-${{ env.ROBOZONKY_VERSION }}-noarch.zip
          asset_content_type: application/zip
      - name: Upload Installer (Windows, x64)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-installer/target/robozonky-distribution-installer-${{ env.ROBOZONKY_VERSION }}-windows-x64.zip
          asset_name: robozonky-installer-${{ env.ROBOZONKY_VERSION }}-windows-x64.zip
          asset_content_type: application/zip
      - name: Upload Installer (MacOS, x64)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-installer/target/robozonky-distribution-installer-${{ env.ROBOZONKY_VERSION }}-macos-x64.tar.gz
          asset_name: robozonky-installer-${{ env.ROBOZONKY_VERSION }}-macos-x64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Installer (Linux, x64)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-installer/target/robozonky-distribution-installer-${{ env.ROBOZONKY_VERSION }}-linux-x64.tar.xz
          asset_name: robozonky-installer-${{ env.ROBOZONKY_VERSION }}-linux-x64.tar.xz
          asset_content_type: application/x-xz
      - name: Upload Installer (Linux, arm64v8)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-installer/target/robozonky-distribution-installer-${{ env.ROBOZONKY_VERSION }}-linux-arm64v8.tar.xz
          asset_name: robozonky-installer-${{ env.ROBOZONKY_VERSION }}-linux-arm64v8.tar.xz
          asset_content_type: application/x-xz
      - name: Upload Installer (noarch)
        if: false == contains(env.ROBOZONKY_VERSION, 'SNAPSHOT')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: robozonky-distribution/robozonky-distribution-installer/target/robozonky-distribution-installer-${{ env.ROBOZONKY_VERSION }}-noarch.zip
          asset_name: robozonky-installer-${{ env.ROBOZONKY_VERSION }}-noarch.zip
          asset_content_type: application/zip
